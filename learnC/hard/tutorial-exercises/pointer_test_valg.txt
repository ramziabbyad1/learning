==17002== Memcheck, a memory error detector
==17002== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==17002== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==17002== Command: ./pointer_test
==17002== 
==17002== Invalid write of size 8
==17002==    at 0x400A5D: main (pointer_test.c:74)
==17002==  Address 0x51fc048 is 0 bytes after a block of size 8 alloc'd
==17002==    at 0x4C2AC3D: malloc (vg_replace_malloc.c:299)
==17002==    by 0x4009F2: main (pointer_test.c:68)
==17002== 
==17002== Invalid write of size 8
==17002==    at 0x400A72: main (pointer_test.c:75)
==17002==  Address 0x51fc050 is 8 bytes after a block of size 8 alloc'd
==17002==    at 0x4C2AC3D: malloc (vg_replace_malloc.c:299)
==17002==    by 0x4009F2: main (pointer_test.c:68)
==17002== 
==17002== Invalid write of size 4
==17002==    at 0x400A88: main (pointer_test.c:77)
==17002==  Address 0x51fc058 is 16 bytes after a block of size 8 alloc'd
==17002==    at 0x4C2AC3D: malloc (vg_replace_malloc.c:299)
==17002==    by 0x4009F2: main (pointer_test.c:68)
==17002== 
==17002== Invalid read of size 8
==17002==    at 0x400ABB: main (pointer_test.c:82)
==17002==  Address 0x51fc048 is 0 bytes after a block of size 8 alloc'd
==17002==    at 0x4C2AC3D: malloc (vg_replace_malloc.c:299)
==17002==    by 0x4009F2: main (pointer_test.c:68)
==17002== 
==17002== Conditional jump or move depends on uninitialised value(s)
==17002==    at 0x4E82943: vfprintf (vfprintf.c:1661)
==17002==    by 0x4E8B3D8: printf (printf.c:33)
==17002==    by 0x400AD0: main (pointer_test.c:82)
==17002== 
==17002== Invalid read of size 8
==17002==    at 0x400AD5: main (pointer_test.c:83)
==17002==  Address 0x51fc050 is 8 bytes after a block of size 8 alloc'd
==17002==    at 0x4C2AC3D: malloc (vg_replace_malloc.c:299)
==17002==    by 0x4009F2: main (pointer_test.c:68)
==17002== 
==17002== Conditional jump or move depends on uninitialised value(s)
==17002==    at 0x4E82943: vfprintf (vfprintf.c:1661)
==17002==    by 0x4E8B3D8: printf (printf.c:33)
==17002==    by 0x400AEA: main (pointer_test.c:83)
==17002== 
==17002== Invalid read of size 4
==17002==    at 0x400968: test_write (pointer_test.c:48)
==17002==    by 0x400B10: main (pointer_test.c:87)
==17002==  Address 0x51fc058 is 16 bytes after a block of size 8 alloc'd
==17002==    at 0x4C2AC3D: malloc (vg_replace_malloc.c:299)
==17002==    by 0x4009F2: main (pointer_test.c:68)
==17002== 
==17002== Invalid read of size 8
==17002==    at 0x400B21: main (pointer_test.c:90)
==17002==  Address 0x51fc048 is 0 bytes after a block of size 8 alloc'd
==17002==    at 0x4C2AC3D: malloc (vg_replace_malloc.c:299)
==17002==    by 0x4009F2: main (pointer_test.c:68)
==17002== 
==17002== Invalid read of size 8
==17002==    at 0x400B31: main (pointer_test.c:91)
==17002==  Address 0x51fc050 is 8 bytes after a block of size 8 alloc'd
==17002==    at 0x4C2AC3D: malloc (vg_replace_malloc.c:299)
==17002==    by 0x4009F2: main (pointer_test.c:68)
==17002== 
sizeof addr = 8
addr->id = 0
addr->set = 10
size addr->name = 10
size addr->email = 10
addr->name = 
addr->email = 
The size of file will be 32
The size of name will be 10
==17002== 
==17002== HEAP SUMMARY:
==17002==     in use at exit: 0 bytes in 0 blocks
==17002==   total heap usage: 4 allocs, 4 frees, 596 bytes allocated
==17002== 
==17002== All heap blocks were freed -- no leaks are possible
==17002== 
==17002== For counts of detected and suppressed errors, rerun with: -v
==17002== Use --track-origins=yes to see where uninitialised values come from
==17002== ERROR SUMMARY: 10 errors from 10 contexts (suppressed: 0 from 0)
